% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use_gh_labels.R
\name{use_gh_labels}
\alias{use_gh_labels}
\title{Manage GitHub Repository Issue Labels}
\usage{
use_gh_labels(path = NULL, ...)
}
\arguments{
\item{path}{(Optional) Path to a \code{labels.yml} configuration file specifying the
GitHub labels in yaml format. See \code{system.file("config/labels.yml", package = "templateeR")}
for an example using the default labels this package provides. If left \code{NULL}
the function will check path \code{.github/labels.yml} first before applying the
default labels.}

\item{...}{Passed to \code{\link[usethis:use_github_labels]{usethis::use_github_labels()}}}
}
\value{
invisibly returns list of labels.
}
\description{
\code{use_gh_labels()} leverages  \code{\link[usethis:use_github_labels]{usethis::use_github_labels()}} to allow users to
create, edit, delete, and manage your repository's GitHub issue labels. It can
update colors and descriptions of current labels and optionally
delete GitHub's default labels.

The main difference between this function and \code{\link[usethis:use_github_labels]{usethis::use_github_labels()}}
is its usage of a \code{labels.yml} configuration file. By default this file should
be places under \code{.github/labels.yml} of your repository.
}
\section{Note}{

Default labels will be removed if argument \code{remove_default} is kept as \code{TRUE}.
It will not delete any issue labels currently assigned to an issue, however.
}

\examples{
\dontrun{
# if no input, will apply default templateeR::gh_labels labels:
use_gh_labels()

# or can provide path to a `labels.yml` config file:
yml_path <- system.file("config/labels.yml", package = "templateeR")
use_gh_labels(path = yml_path)

# or can use `usethis::use_github_labels()` arguments:
use_gh_labels(
 labels = c("foofy", "foofier", "foofiest"),
   colours = NULL,
   descriptions = NULL
)
}

}
\seealso{
\code{\link[usethis:use_github_labels]{usethis::use_github_labels()}}, \code{\link[gh:gh]{gh::gh()}}.
}
